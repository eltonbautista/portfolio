---
import globals from "../styles/globals.css";
import Navbar from "../components/Navbar.astro";

import octocat from "../../public/gh-icon.svg";
import linkedin from "../../public/linkedin-icon.svg";
import twitter from "../../public/twitter-icon.svg";
import Layout from "./Layout.astro";

export interface IProjectLayout {
  projectClass: string;
  imgSrc: string;
  imgAlt: string;
}

const { content, projectClass, imgSrc, imgAlt } = Astro.props;
---

<html>

<head>
  <title>Project Overview: {content.title}</title>
</head>

<body>
  <Layout title={content.title}>
    <Navbar socialOne={octocat} socialOneLink="https://github.com/eltonbautista" socialTwo={linkedin}
      socialTwoLink="https://www.linkedin.com/in/eltonbautista/" socialThree={twitter}
      socialThreeLink="https://twitter.com/psychtotech" />
    <main>
      <div class={`project project-container ${projectClass}`}>

        <header class="project hero">
          <h1 class="project title">
            <strong>PROJECT</strong>:
            <span class="project glitch-title" data-text="clockedOut">"{content.title}"</span>
          </h1>

          <article class="project description">
            {content.description}
          </article>
          <article class="project client">
            <h3>Client:</h3>
            {content.client}
          </article>


        </header>

        <div class="project content-container">

          <div class="project project-section problem-container">
            <h3>
              Problem:
            </h3>
            <p class="project problem">
              <em>
                {content.problem}:
                {content.problemOne ?
                <ol>
                  <li>{content.problemOne}</li>
                  <li>{content.problemTwo}</li>
                  <li>{content.problemThree}</li>
                </ol> : null}
              </em>
            </p>
          </div>
          <div class="project project-section img-container">
            <img src={imgSrc} alt={imgAlt}>
          </div>

          <div class="project project-section solution-container">
            <h3>
              Solution:
            </h3>

            <p class="project solution">
              <em>
                {content.solution}
              </em>
            </p>
          </div>

          <div class="project project-section video-container">
            <video id="my-video" class="project video" muted src={content.video}>
              <source src={content.video} type="video/mp4" />
            </video>
          </div>

          <div class="project project-section built-with-container">
            <h3>

              Built with:

            </h3>
            <p class="project built-with">
              <i>{content.builtWith}</i>
            </p>
          </div>

          <div class="project project-section shortcomings-container">
            <h3>
              Shortcomings:
            </h3>
            <p>
              {content.shortcomings}
            </p>
          </div>

        </div>

      </div>
    </main>
  </Layout>


</body>

<script is:inline>
  const video = document.querySelector('.project.video');
  const videoContainer = document.querySelector('.video-container');
  const contentContainer = [...document.querySelector('.project.content-container').children];
  const [problem, problemVideo, solution, solutionVideo, builtWith, shortcomings] = contentContainer;
  const mediaQueryEight = window.matchMedia("(max-width: 800px)");

  if (mediaQueryEight.matches) {
    video.controls = true;
  }

  video.addEventListener('mouseover', function (e) {
    this.play();
    this.classList.add('pop-out');
    videoContainer.classList.add('pop-out');
  });

  contentContainer.forEach((section, i) => {
    const nextSection = contentContainer[i + 1];
    section.addEventListener('click', function () {
      nextSection.classList.add('show-section');
      if (contentContainer.indexOf(nextSection) === 2 || contentContainer.indexOf(nextSection) === 5) {
        nextSection.scrollIntoView({ behavior: "smooth", block: "start" });
      }
    });
  });

</script>

</html>

<style>
  :root {
    --f-size: 15;
    --f-unit: 1vmin;
    --f: calc(var(--f-size) * var(--f-unit));
    --bg: #181717;
  }

  .project-container {
    display: grid;
    gap: 3em;
  }

  .hero {
    display: grid;
    grid-template-rows: 0.1fr 0.2fr auto;
  }

  .hero>h1 {
    font-size: calc(var(--font-size-xl));
  }


  .hero>.project.client {
    position: relative;
    height: fit-content;
    font-size: var(--font-size-base);
    align-self: end;
    border-bottom: 1px solid var(--color-text-opposite);
  }

  .project.client>h3 {
    display: inline-block;
  }

  .content-container {
    display: grid;
  }

  .video-container {
    margin-bottom: 1.5em;
  }

  .project.video {
    transition: 300ms ease-in-out transform;

  }

  .project.video:hover {
    transform: scaleY(1.1);
  }


  @media (min-width: 1100px) {
    .project-container {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
    }

    .hero {
      min-height: 90vh;
      grid-area: 1/1/2/13;
    }

    .hero>h1 {
      font-size: calc(var(--font-size-xl) + 1vw);

    }

    .hero>article {
      font-size: calc(var(--font-size-lg) + 0.25em);
    }

    .glitch-title {
      flex: 1;
      line-height: 1.5;
      margin: auto;
      color: var(--color-text-opposite);
      text-align: center;
      transform: scaleX(var(--scale, 1));
      font-style: italic;
      animation: glitch-p 2s 2 alternate, glitchwar 2s 2 alternate both;
    }

    .glitch-title::before,
    .glitch-title::after {
      --top: 0;
      --left: 0;
      --v-height: 30%;

      --n-tenth: calc(var(--f-size) * .1 * var(--top));
      --t-cut: calc(var(--n-tenth) / var(--f-size) * 100%);
      --b-cut: calc(var(--t-cut) + var(--v-height));

      content: attr(data-text);
      position: absolute;
      width: 55.8%;
      left: 0;
      text-align: end;
      transform: translateX(calc(var(--left) * 100%));
      filter: drop-shadow(0 0 transparent);

      background-color: var(--bg-color-sub);
      clip-path: polygon(0% var(--t-cut), 100% var(--t-cut), 100% var(--b-cut), 0% var(--b-cut));
    }

    .glitch-title::before {
      animation: glitch-b 1.7s 2 alternate forwards;
    }

    .glitch-title::after {
      animation: glitch-a 3.1s 2 alternate forwards;
    }

    @keyframes glitch-p {
      17% {
        --scale: .87;
      }

      31% {
        --scale: 1.1;
      }

      37% {
        --scale: 1.3;
      }

      47% {
        --scale: .91;
      }

      87% {
        --scale: 1;
      }
    }

    @keyframes glitch-a {

      10%,
      30%,
      50%,
      70%,
      90% {
        --top: 0;
        --left: 0;
      }

      0% {
        --v-height: 15%;
      }

      20% {
        --left: .005;
      }

      40% {
        --left: .01;
        --v-height: 20%;
        --top: 3;
      }

      60% {
        --left: .03;
        --v-height: 25%;
        --top: 6;
      }

      80% {
        --left: .07;
        --v-height: 5%;
        --top: 8;
      }

      100% {
        --left: .0;
        --v-height: 30%;
        --top: 0;
      }
    }

    @keyframes glitch-b {

      10%,
      30%,
      50%,
      70%,
      90% {
        --top: 0;
        --left: 0;
      }

      0% {
        --v-height: 15%;
        --top: 10;
      }

      20% {
        --left: -.005;
      }

      40% {
        --left: -.01;
        --v-height: 17%;
        --top: 3;
      }

      60% {
        --left: -.03;
        --v-height: 35%;
        --top: 6;
      }

      80% {
        --left: -.07;
        --v-height: 5%;
        --top: 8;
      }

      100% {
        --left: 0;
        --v-height: 30%;
        --top: 0;
      }
    }

    @keyframes glitchwar {
      0% {
        font-style: italic;
        font-family: HintRetro, JostMedium;
        line-height: 1.2;
        color: var(--color-text-opposite);
        letter-spacing: 0.05em;
      }

      15% {
        text-decoration: line-through;
      }

      30% {
        text-decoration: wavy;
        color: var(--color-text-opposite);
        font-family: FightingSpirit, HintRetro, JostLight, sans-serif;
      }

      45% {
        text-decoration: line-through;
        text-transform: lowercase;
        color: var(--bg-color-main);
      }


      65% {
        text-decoration: underline;
        text-transform: capitalize;
      }

      80% {
        text-decoration-style: solid;
        font-style: italic;
        text-transform: uppercase;
      }

      100% {
        font-family: JostLight, sans-serif;
        text-transform: uppercase;
        line-height: 1.2;
        letter-spacing: 0.05em;
      }
    }

    .content-container {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      grid-template-rows: repeat(8, 1fr);
      max-width: 100%;
      gap: 0.5em;
      grid-area: 2/2/5/12;
    }

    .content-container>div {
      outline: 1px solid var(--bg-color-main);
      padding: 1em;
    }

    .project-section.show-section {
      opacity: 1;
      visibility: visible;
      transition: 200ms opacity ease-in-out;
      transition-delay: 0ms;
    }

    .project-section {
      opacity: 0;
      visibility: hidden;
      /* transition: 200ms visibility ease-in-out; */
      transition-delay: 0ms;
    }

    .content-container>.project-section.problem-container {
      visibility: visible;
      opacity: 1;
    }

    .problem-container {
      grid-area: 1/1/2/13;
    }

    .img-container {
      grid-area: 2/3/3/11;
    }

    .video-container {
      grid-area: 4/1/6/9;
      display: grid;
      align-items: center;
      margin-bottom: 0;
    }

    .solution-container {
      grid-area: 4/9/7/13;
    }

    .shortcomings-container {

      grid-area: 7/1/8/13;
    }

    .built-with-container {
      grid-area: 6/1/7/9;
    }
  }



  body,
  html {
    background-color: var(--bg-color-sub);
    color: var(--bg-color-main);
    font-size: var(--font-size-base);
  }

  main {
    margin: auto;
    padding: 1em;
    max-width: 85vw;
    min-height: 100%;
    background-color: var(--bg-color-sub);
    font-family: JostLight, sans-serif;
  }

  h1 {
    margin: 2rem 0;
  }

  /*
  Josh's Custom CSS Reset
  https://www.joshwcomeau.com/css/custom-css-reset/
*/
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
    font-family: JostLight, sans-serif;
    letter-spacing: 1.25px;
  }

  html,
  body {
    min-height: 100vh;
    min-width: 100%;
    margin: 0;
    padding: 0;
  }

  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
    margin: 0;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }

  #root,
  #__next {
    isolation: isolate;
  }
</style>