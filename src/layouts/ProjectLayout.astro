---
import globals from "../styles/globals.css";
import Navbar from "../components/Navbar.astro";

import octocat from "../../public/gh-icon.svg";
import linkedin from "../../public/linkedin-icon.svg";
import twitter from "../../public/twitter-icon.svg";
import Layout from "./Layout.astro";

export interface IProjectLayout {
  projectClass: string;
  imgSrc: string;
  imgAlt: string;
}

const { content, projectClass, imgSrc, imgAlt } = Astro.props;
---

<html>

<head>
  <title></title>
</head>






<body>
  <Layout title={content.title}>
    <Navbar socialOne={octocat} socialOneLink="https://github.com/eltonbautista" socialTwo={linkedin}
      socialTwoLink="https://www.linkedin.com/in/eltonbautista/" socialThree={twitter}
      socialThreeLink="https://twitter.com/psychtotech" />
    <main>
      <div class={`project project-container ${projectClass}`}>

        <header class="project hero">
          <h1 class="project title">{content.title}</h1>

          <article class="project description">
            {content.description}
          </article>
          <article class="project client">
            <h3>Client:</h3>
            {content.client}
          </article>


        </header>

        <div class="project content-container">

          <div class="project problem-container">
            <h3>
              Problem:
            </h3>
            <p class="project problem">
              <em>
                {content.problem}:
                {content.problemOne ?
                <ol>
                  <li>{content.problemOne}</li>
                  <li>{content.problemTwo}</li>
                  <li>{content.problemThree}</li>
                </ol> : null}
              </em>
            </p>
          </div>
          <div class="project img-container">
            <img src={imgSrc} alt={imgAlt}>
          </div>

          <div class="project solution-container">
            <h3>
              Solution:
            </h3>

            <p class="project solution">
              <em>
                {content.solution}
              </em>
            </p>
          </div>

          <div class="project video-container">
            <video id="my-video" class="project video" muted src={content.video}>
              <source src={content.video} type="video/mp4" />
            </video>
          </div>

          <div class="project shortcomings-container">
            <h3>
              Shortcomings:
            </h3>
            <p>
              {content.shortcomings}
            </p>
          </div>

          <div class="project built-with-container">
            <h3>

              Built with:

            </h3>
            <p class="project built-with">
              <i>{content.builtWith}</i>
            </p>
          </div>

        </div>

      </div>
    </main>
  </Layout>


</body>

<script is:inline>
  const video = document.querySelector('.project.video');
  const videoContainer = document.querySelector('.video-container');

  video.addEventListener('click', function (e) {
    this.play();
    this.classList.add('pop-out');
    videoContainer.classList.add('pop-out');
  });

</script>

</html>

<style>
  .project-container {
    display: grid;
    gap: 3em;
  }

  .hero {
    display: grid;
    grid-template-rows: 0.1fr 0.2fr auto;
  }

  .hero>h1 {
    font-size: calc(var(--font-size-xl) + 1em);
  }

  .hero>.project.client {
    position: relative;
    height: fit-content;
    font-size: var(--font-size-base);
    align-self: end;
    border-bottom: 1px solid var(--color-text-opposite);
  }

  .project.client>h3 {
    display: inline-block;
  }

  .content-container {
    display: grid;
    gap: 1em;
  }

  .video-container {
    margin-bottom: 1.5em;
  }

  .project.video {
    transition: 300ms ease-in-out transform;

  }

  .project.video:hover {
    transform: scaleY(1.1);
  }


  @media (min-width: 800px) {
    .project-container {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
    }

    .hero {
      min-height: 90vh;
      grid-area: 1/1/2/13;
    }

    .hero>h1 {
      font-size: calc(var(--font-size-xl) + 3em);

    }

    .hero>article {
      font-size: calc(var(--font-size-lg) + 0.25em);
    }

    .content-container {
      display: grid;
      grid-template-columns: repeat(12, 1fr);
      grid-template-rows: repeat(8, 1fr);
      /* margin-top: 10em; */
      max-width: 100%;
      gap: 1em;
      grid-area: 2/2/5/12;
    }

    .content-container>div {
      border: 1px solid var(--bg-color-main);
      padding: 1em;
    }

    .problem-container {
      grid-area: 1/1/2/13;
    }

    .img-container {
      grid-area: 2/3/4/11;
    }

    .video-container {
      grid-area: 4/1/6/9;
      display: grid;
      align-items: center;
      margin-bottom: 0;
    }

    .solution-container {
      grid-area: 4/9/7/13;
    }

    .shortcomings-container {
      grid-area: 6/1/7/9;
    }

    .built-with-container {
      grid-area: 7/1/8/13;
    }
  }



  body,
  html {
    background-color: var(--bg-color-sub);
    color: var(--bg-color-main);
    font-size: var(--font-size-base);
  }

  main {
    margin: auto;
    padding: 1em;
    max-width: 85vw;
    min-height: 100%;
    background-color: var(--bg-color-sub);
    font-family: JostLight, sans-serif;
  }

  h1 {
    margin: 2rem 0;
  }

  /*
  Josh's Custom CSS Reset
  https://www.joshwcomeau.com/css/custom-css-reset/
*/
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  * {
    margin: 0;
    font-family: JostLight, sans-serif;
    letter-spacing: 1.25px;
  }

  html,
  body {
    min-height: 100vh;
    min-width: 100%;
    margin: 0;
    padding: 0;
  }

  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
    margin: 0;
  }

  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }

  input,
  button,
  textarea,
  select {
    font: inherit;
  }

  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }

  #root,
  #__next {
    isolation: isolate;
  }
</style>